CONCEPTS TO USE:
[ ] Asymmetric Encryption:
      - to encrypt transactions' reason (using public key of the receiver)

[ ] Symmetric Encryption:
      - to encrypt user's data stored in the db
        - we can store the username (or the address when introduced) as plain text, because
        other users need it to perform transactions
        - other private personal information required on signup is gonna be saved encrypted in the db
          (using user's password as the key)
        - a new command to see personal info with password

[ ] Authentication (Report):
      - tell the reason why we use a particular authentication method over the other ones

[ ] Digital Signatures:
      - to sign transactions

[ ] Password Storage:
      - use a Key Derivation Function + Salt (pbkdf2) instead of a single hash function 

[ ] Certification Authority:
      - one certification authority will give the keys to the users


TO REVISE FROM 1ST DELIVERY:
[ ] AES (Report):
      - we cannot take the key length for granted. We have to specify why we are using
        a specific key length

[ ] File Integrity:
      - we should verify the integrity of the files used: check that has not been corrupted when
        starting the application
        - compute its hash every time that the file is changed and stored it somewhere
        - calculate the hash when the application starts and compared it to the stored one
        - how to protect hash file integrity:
          => relying on cryptography, digital signatures or asymmetric encryption can help us

      Would be spectacular to: Having a backup of information if something goes wrong.
      Otherwise just restart the application

____

[X] Randomness:
      - to determine the value of the currency
      - suggest a random password to the user when signing up
[X] Symmetric Encryption (AES):
      - transactions will have an additional field: reason, that will be encrypted.
        => only sender and receiver of this transaction can see it
[X] Hash Functions:
      - Block hashes
      - Store passwords

FEATURES:
  - DONE:
    - create blocks
    - create blockchain
    - create proof of work
    - create transactions
    - create users:
        - signup
        - login 
    - Introduce mining rewards  
    - Calculate user balance
    - Deny overspending transactions
    - Giving initial reward to new users
    - Extra verifications
        - verify chain function: check that previous hashes are consistent
        - verify block integrity and validity when adding it to the chain (hash starts with 000..) (see example projects)
    - Store Blockchain in some file

  - TO IMPLEMENT:
    PRIORITY:
        - ensure that if the file is modified we can detect it


    FUTURE:
    - Sign Transactions
        - digital signatures with private-public key
        - include a transaction id
    - Introduce Wallets:
        - wallet address for transactions or rewards
    - Decentralization/Distribution
        - every user has its own copy of the blockchain (can be stored on files with the name/id of the user)
          when an user performs a transaction should add it to its own blockchain and then broadcast it to 
          everyone else
        - multi-user support: multiple terminals running the application can be opened at the same time
    - Simulate errors when trying to corrupt data
    - Keep user logged in
    - Better error handling in cli input:
        - username, password: must be longer than tot characters



BUGS
- check that key length is not greater then 128 bits
- what happens if not padding is needed? THe unpad method will remove something anyways?

CODING FEATURES/OPTIMIZATIONS
- don't store key in aes cipher, but pass key to decrypt method?
- Make userDB a singleton
- cache the file as an attribute inside users_db
- userDB:
  - drop
  - ...
  - don't keep db attribute but open file every time?
- user @property on block to recompute hash every time something changes?
- (save certificate inside user class? and get it on login)
- close files